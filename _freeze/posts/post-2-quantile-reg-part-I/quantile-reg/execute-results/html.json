{
  "hash": "08e50f69ca6e4998190739c52cb5cba5",
  "result": {
    "markdown": "---\ntitle: \"Quantile Regressions in Stan: Part I\"\nauthor: \"Sean Pinkney\"\ndate: last-modified\ncategories: [stan, quantile]\nbibliography: references.bib\ndraft: false\n---\n\n::: {.cell}\n\n:::\n\n\nQuantile regressions are relatively new in the Bayesian literature first appearing in @yu who described an asymmetric Laplace distribution to estimate the conditional quantiles. This post is going to show the asymmetric Laplace and the augmented version. In part II I will show the score likelihood method. \n\nThe asymmetric Laplace distribution is given as \n$$\n\\operatorname{ALD}(Y \\mid x, \\beta) = \\frac{\\tau^n (1 - \\tau)^n}{\\sigma^n}\\exp \\bigg( -\\frac{\\sum_{i=1}^n \\rho_\\tau (y_i - x_i^{\\top}\\beta)}{\\sigma} \\bigg)\n$$\n\nwhere \n\n$$\n\\rho_\\tau(u) = \\frac{|u| + (2\\tau - 1)u}{2}\n$$\n\nWe may write this in Stan as\n\n\n::: {.cell output.var='asymetric_laplace'}\n\n```{.stan .cell-code}\nfunctions{\nreal q_loss(real q, vector u){\n  return 0.5 * sum(abs(u) + (2 * q - 1) * u);\n}\n\nreal ald_lpdf(vector y, real q, real sigma, vector q_est){\n  int N = num_elements(y);\n  \n  return N * (log(q) + log1m(q) - log(sigma)) - q_loss(q, y - q_est) / sigma;\n}\n}\ndata {\n  int N;                   // Number of observation\n  int P;                   // Number of predictors\n  real<lower=0, upper=1> q;\n  vector[N] y;             // Response variable sorted\n  matrix[N, P] x;\n}\nparameters {\n  vector[P] beta;\n  real<lower=0> sigma;\n}\nmodel {\n  beta ~ normal(0, 4);\n  sigma ~ exponential(1);\n  y ~ ald(q, sigma, x * beta);\n}\n```\n:::\n\n\nLet's compare the 5th percentile to the `Brq` R package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Brq)\ndata(\"ImmunogG\")\nout_asym_laplace <- asymetric_laplace$sample(\n  data = list(N = nrow(ImmunogG),\n              P = 3,\n              q = 0.05,\n              y = ImmunogG$IgG,\n              x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),\n  seed = 12123123, \n  parallel_chains = 4,\n  iter_warmup = 500,\n  iter_sampling = 500,\n    refresh = 0,\n  show_messages = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 0.5 seconds.\nChain 3 finished in 0.4 seconds.\nChain 4 finished in 0.5 seconds.\nChain 2 finished in 0.6 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 0.5 seconds.\nTotal execution time: 0.7 seconds.\n```\n:::\n\n```{.r .cell-code}\nout_asym_laplace$summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 10\n  variable     mean   median      sd     mad       q5      q95  rhat ess_bulk\n  <chr>       <dbl>    <dbl>   <dbl>   <dbl>    <dbl>    <dbl> <dbl>    <dbl>\n1 lp__     -670.    -670.    1.50    1.24    -673.    -669.     1.01     585.\n2 beta[1]     0.587    0.601 0.246   0.271      0.179    0.962  1.02     385.\n3 beta[2]     1.31     1.31  0.199   0.210      1.01     1.64   1.02     336.\n4 beta[3]    -0.156   -0.155 0.0338  0.0333    -0.212   -0.104  1.01     373.\n5 sigma       0.165    0.165 0.00958 0.00897    0.149    0.181  1.01     645.\n# … with 1 more variable: ess_tail <dbl>\n```\n:::\n\n```{.r .cell-code}\ny = ImmunogG$IgG\nx = ImmunogG$Age\nX=cbind(x, x^2)\nfit = Brq(y ~ X , tau= 0.05,runs= 2000, burn=1000)\nprint(summary(fit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nBrq.formula(formula = y ~ X, tau = 0.05, runs = 2000, burn = 1000)\n\ntau:[1] 0.05\n\n            Estimate L.CredIntv  U.CredIntv\nIntercept  0.6285948  0.1193195  1.04185440\nXx         1.2928087  0.8984968  1.67267316\nX         -0.1541316 -0.2265564 -0.08528427\n```\n:::\n:::\n\n\n## Scale-mixture representation\n\nThe above may also be written as a mixture of exponential  and normal distributions. Letting\n\n$$\n\\begin{aligned}\nz_i &\\sim \\operatorname{Exp}(1) \\\\\n\\sigma &\\sim \\operatorname{Exp}(1) \\\\\ny_i &\\sim \\mathcal{N}(x_i^{\\top}\\beta_p + \\sigma \\theta z_i,\\, \\tau \\sigma \\sqrt{z_i})\n\\end{aligned}\n$$\nwhere \n\n$$\n\\begin{aligned}\n\\theta &= \\frac{1 - 2 q}{q (1 - q)} \\\\\n\\tau &= \\sqrt{\\frac{2}{q(1 -q)}}\n\\end{aligned}\n$$\n\nThe following Stan model implements the augmented approach.\n\n::: {.cell output.var='augmented_laplace'}\n\n```{.stan .cell-code}\ndata {\n  int N;                   // Number of observation\n  int P;                   // Number of predictors\n  real<lower=0, upper=1> q;\n  vector[N] y;             // Response variable sorted\n  matrix[N, P] x;\n}\ntransformed data {\n  real theta = (1 - 2 * q) / (q * (1 - q));\n  real tau = sqrt(2 / (q * (1 - q)));\n}\nparameters {\n  vector[P] beta;\n  vector<lower=0>[N] z;\n  real<lower=0> sigma;\n}\nmodel {\n  beta ~ normal(0, 2);\n  sigma ~ exponential(1);\n  \n  // Data Augmentation\n  z ~ exponential(1);\n  y ~ normal(x * beta + sigma * theta * z, tau * sqrt(z) * sigma);\n}\n```\n:::\n\nLet's fit the model\n\n::: {.cell}\n\n```{.r .cell-code}\nout_aug_laplace <- augmented_laplace$sample(\n  data = list(N = nrow(ImmunogG),\n              P = 3,\n              q = 0.05,\n              y = ImmunogG$IgG,\n              x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),\n  seed = 12123123, \n  parallel_chains = 4,\n  iter_warmup = 500,\n  iter_sampling = 500,\n    refresh = 0,\n  show_messages = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning MCMC with 4 parallel chains...\n\nChain 1 finished in 3.7 seconds.\nChain 3 finished in 3.7 seconds.\nChain 2 finished in 4.0 seconds.\nChain 4 finished in 4.1 seconds.\n\nAll 4 chains finished successfully.\nMean chain execution time: 3.9 seconds.\nTotal execution time: 4.2 seconds.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 77 of 2000 (4.0%) transitions ended with a divergence.\nSee https://mc-stan.org/misc/warnings for details.\n```\n:::\n\n```{.r .cell-code}\nout_aug_laplace$summary(\"beta\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  variable   mean median     sd    mad     q5     q95  rhat ess_bulk ess_tail\n  <chr>     <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl>    <dbl>    <dbl>\n1 beta[1]   0.589  0.596 0.249  0.264   0.169  0.982   1.01     443.     733.\n2 beta[2]   1.31   1.32  0.210  0.201   0.953  1.64    1.01     397.     505.\n3 beta[3]  -0.155 -0.155 0.0354 0.0321 -0.216 -0.0973  1.01     394.     522.\n```\n:::\n:::\n\nOuch! Divergences. Although the parameter estimates look comparable. Let's inspect the pairs plots between the augmented version and the asymmetric Laplace.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bayesplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThis is bayesplot version 1.9.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- Online documentation and vignettes at mc-stan.org/bayesplot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n- bayesplot theme set to bayesplot::theme_default()\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * Does _not_ affect other ggplot2 plots\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n   * See ?bayesplot_theme_set for details on theme setting\n```\n:::\n\n```{.r .cell-code}\nnp_aug_laplace <- nuts_params(out_aug_laplace)\nnp_asym_laplace <- nuts_params(out_asym_laplace)\nmcmc_pairs(out_aug_laplace$draws(c(\"beta\", \"sigma\")), np = np_aug_laplace)\n```\n\n::: {.cell-output-display}\n![](quantile-reg_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmcmc_pairs(out_asym_laplace$draws(c(\"beta\", \"sigma\")), np = np_asym_laplace)\n```\n\n::: {.cell-output-display}\n![](quantile-reg_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\nThe pairs plots don't appear to show the divergence originating be due to `beta` or `sigma`. It's most likely the augmentation variables `z`. As I'm up for time on this, I'd be curious to test out alternative specifications or see if anyone has encountered these issues with the augmented version and found a solution.\n\nFor the next post, we'll take a look at an approximate likelihood using the data which asymptotically approaches the true likelihood with more data. \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}