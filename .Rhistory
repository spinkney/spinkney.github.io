out_score$summary()
library(Brq)
data("ImmunogG")
dat <- data.frame(y = ImmunogG$IgG,
alpha = 1,
x = ImmunogG$Age,
xsq = ImmunogG$Age^2)
out_score_mod <- multiple_score_qr$sample(
data = list(N = nrow(ImmunogG),
P = 3,
K = 3,
q = c(0.05, 0.5, 0.95),
y = ImmunogG$IgG,
x = as.matrix(dat[, 2:4])),
seed = 12123123,
parallel_chains = 4,
max_treedepth = 12,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_freq_1 <- rq(y ~ x + xsq,
data = dat,
tau = 0.05)
out_freq_2 <- rq(y ~ x + xsq,
data = dat,
tau = 0.5)
out_freq_3 <- rq(y ~ x + xsq,
data = dat,
tau = 0.95)
out_score_mod$summary()
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = log(N), x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified$summary()
#| code-fold: show
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_score <- score_qr$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_asym_laplace <- asym_laplace$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = log(N), x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified$summary()
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified$summary()
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified$summary()
set.seed(12312)
N     <- 10000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
out_score <- score_qr$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = log(N), x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_asym_laplace <- asym_laplace$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_freq <- quantreg::rq(y ~ x, tau = q)
set.seed(12312)
N     <- 10000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
out_score <- score_qr$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_score_modified <- score_qr_modified$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
out_asym_laplace <- asym_laplace$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_freq <- quantreg::rq(y ~ x, tau = q)
out_score$summary()
out_score_modified$summary()
print(summary(out_freq, se = "boot"))
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000,
refresh = 0,
show_messages = FALSE
)
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 2,
q = q,
y = y,
x = as.matrix(data.frame(alpha = 1, x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 300,
iter_sampling = 300,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary()
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 1,
q = q,
y = y,
x = as.matrix(data.frame(x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 300,
iter_sampling = 300,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary()
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 1,
q = q,
y = y,
x = as.matrix(data.frame(x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 300,
iter_sampling = 300,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary()
set.seed(12312)
library(quantreg)
N     <- 1000
x     <- runif(N, max=10)
alpha <- -1
beta  <- 2
y     <- alpha + beta * x + rnorm(N, sd = .5 * x)
q     <- 0.05
# frequentist estimate
out_freq <- quantreg::rq(y ~ x, tau = q)
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = N,
P = 1,
q = q,
y = y,
x = as.matrix(data.frame(x = x))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 300,
iter_sampling = 300,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary()
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 3,
q = 0.05,
y = ImmunogG$IgG,
x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 2,
q = 0.05,
y = ImmunogG$IgG,
x = as.matrix(data.frame(x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_envelope$summary()
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 2,
q = 0.5,
y = ImmunogG$IgG,
x = as.matrix(data.frame(x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary()
out_aug_laplace <- augmented_laplace$sample(
data = list(N = nrow(ImmunogG),
P = 3,
q = 0.5,
y = ImmunogG$IgG,
x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
library(Brq)
data("ImmunogG")
out_asym_laplace <- asymetric_laplace$sample(
data = list(N = nrow(ImmunogG),
P = 3,
q = 0.5,
y = ImmunogG$IgG,
x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_asym_laplace$summary()
y = ImmunogG$IgG
x = ImmunogG$Age
X=cbind(x, x^2)
fit = Brq(y ~ X , tau= 0.05,runs= 2000, burn=1000)
print(summary(fit))
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 2,
q = 0.5,
y = ImmunogG$IgG,
x = as.matrix(data.frame(x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary(c("beta", "sigma"))
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 2,
q = 0.05,
y = ImmunogG$IgG,
x = as.matrix(data.frame(x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary(c("beta", "sigma"))
library(Brq)
data("ImmunogG")
out_asym_laplace <- asymetric_laplace$sample(
data = list(N = nrow(ImmunogG),
P = 3,
q = 0.05,
y = ImmunogG$IgG,
x = as.matrix(data.frame(alpha = 1, x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 0,
show_messages = FALSE
)
out_asym_laplace$summary()
y = ImmunogG$IgG
x = ImmunogG$Age
X=cbind(x, x^2)
fit = Brq(y ~ X , tau= 0.05,runs= 2000, burn=1000)
print(summary(fit))
out_envelope$summary()
data("ImmunogG")
out_envelope <- asymetric_laplace_envelope$sample(
data = list(N = nrow(ImmunogG),
P = 2,
q = 0.05,
y = ImmunogG$IgG,
x = as.matrix(data.frame(x = ImmunogG$Age, xsq = ImmunogG$Age^2))),
seed = 12123123,
parallel_chains = 4,
iter_warmup = 500,
iter_sampling = 500,
refresh = 100,
show_messages = FALSE
)
out_envelope$summary(c("alpha", "beta", "sigma"))
